// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: proto/excel2pdf.proto

package o2pdf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConverterServiceClient is the client API for ConverterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConverterServiceClient interface {
	Convert(ctx context.Context, opts ...grpc.CallOption) (ConverterService_ConvertClient, error)
}

type converterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConverterServiceClient(cc grpc.ClientConnInterface) ConverterServiceClient {
	return &converterServiceClient{cc}
}

func (c *converterServiceClient) Convert(ctx context.Context, opts ...grpc.CallOption) (ConverterService_ConvertClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConverterService_ServiceDesc.Streams[0], "/o2pdf.ConverterService/Convert", opts...)
	if err != nil {
		return nil, err
	}
	x := &converterServiceConvertClient{stream}
	return x, nil
}

type ConverterService_ConvertClient interface {
	Send(*ConvertRequest) error
	Recv() (*ConvertResponse, error)
	grpc.ClientStream
}

type converterServiceConvertClient struct {
	grpc.ClientStream
}

func (x *converterServiceConvertClient) Send(m *ConvertRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *converterServiceConvertClient) Recv() (*ConvertResponse, error) {
	m := new(ConvertResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConverterServiceServer is the server API for ConverterService service.
// All implementations must embed UnimplementedConverterServiceServer
// for forward compatibility
type ConverterServiceServer interface {
	Convert(ConverterService_ConvertServer) error
	mustEmbedUnimplementedConverterServiceServer()
}

// UnimplementedConverterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConverterServiceServer struct {
}

func (UnimplementedConverterServiceServer) Convert(ConverterService_ConvertServer) error {
	return status.Errorf(codes.Unimplemented, "method Convert not implemented")
}
func (UnimplementedConverterServiceServer) mustEmbedUnimplementedConverterServiceServer() {}

// UnsafeConverterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConverterServiceServer will
// result in compilation errors.
type UnsafeConverterServiceServer interface {
	mustEmbedUnimplementedConverterServiceServer()
}

func RegisterConverterServiceServer(s grpc.ServiceRegistrar, srv ConverterServiceServer) {
	s.RegisterService(&ConverterService_ServiceDesc, srv)
}

func _ConverterService_Convert_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConverterServiceServer).Convert(&converterServiceConvertServer{stream})
}

type ConverterService_ConvertServer interface {
	Send(*ConvertResponse) error
	Recv() (*ConvertRequest, error)
	grpc.ServerStream
}

type converterServiceConvertServer struct {
	grpc.ServerStream
}

func (x *converterServiceConvertServer) Send(m *ConvertResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *converterServiceConvertServer) Recv() (*ConvertRequest, error) {
	m := new(ConvertRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConverterService_ServiceDesc is the grpc.ServiceDesc for ConverterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConverterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "o2pdf.ConverterService",
	HandlerType: (*ConverterServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Convert",
			Handler:       _ConverterService_Convert_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/excel2pdf.proto",
}
